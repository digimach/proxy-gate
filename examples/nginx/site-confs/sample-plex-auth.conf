server {
    listen 80;
    listen 443 ssl http2;
    server_name app-behind-plex.*;

    ssl_certificate           /config/keys/cert.crt;
    ssl_certificate_key       /config/keys/cert.key;

    if ($scheme = http) {
        return 301 https://$host$request_uri;
    }
    
    # the location can be any path that you want to protect
    root /config/www;
    index index.html;

    location / {
        # The next line is what performs the authentication and authorization check.
        auth_request .auth;

        # In this example we serve a static file if the request is authorized.
        # Replace this with any other directive that you want to use to serve the request.
        index protected-index.html;
        root /config/www;
        try_files $uri $uri/ protected-index.html =404;
    }

    # This is the endpoint that performs the authentication and authorization check.
    # It is called by other location blocks that need to protect the same resource.
    # This is only accessible from within the nginx server.
    # Because this is internal we don't bother going through the actual proxy.
    # i.e. we go directly to the upstream server.
    location .auth {
        internal;
        # the proxy_pass directive contains the conditions under which the request is considered authorized.
        proxy_pass              http://proxy-gate-backend/auth/plex/check;
        proxy_pass_request_body off;
        proxy_set_header        Content-Length "";
        proxy_set_header        X-Original-URI $scheme://$host$request_uri;
    }

    error_page 401 = @error;
    error_page 403 = @error;
    location @error {
        # We redirect the user to the login page if the request is not authorized or forbidden.
        # In this case we use the public URL of the login page.
        if ($status = 403) {
            return 302 https://$proxy_gate_public_hostname/login/?workflowStep=forbidden&methods=plex&redirect=$scheme://$host$request_uri;
        }
        return 302 https://$proxy_gate_public_hostname/login/?methods=plex&redirect=$scheme://$host$request_uri;
    }

}